{"version":3,"sources":["logo.svg","api.js","components/errorMessage.js","components/stations.js","components/spinner.js","app.js","index.js"],"names":["module","exports","__webpack_require__","p","STATION_INFORMATION_URL","STATION_STATUS_URL","parseResponse","response","status","json","Error","concat","fetchIt","url","fetch","then","mergeStationData","stationInformation","stationStatus","statusMap","data","stations","reduce","map","Object","objectSpread","defineProperty","station_id","station","sort","a","b","name","localeCompare","components_errorMessage","_ref","error","react_default","createElement","className","Fragment","Station","num_bikes_available","num_docks_available","src_components_stations","_ref2","components_spinner","visible","App","_useState","useState","loading","_useState2","slicedToArray","setData","_useState3","_useState4","hasFetched","setHasFetched","callback","promises","Promise","all","catch","console","fetchData","src","logo","alt","ReactDOM","render","src_app","document","getElementById"],"mappings":"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","file":"static/js/main.4c162dea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dc817f4f.svg\";","const STATION_INFORMATION_URL = \"https://gbfs.urbansharing.com/oslobysykkel.no/station_information.json\";\nconst STATION_STATUS_URL = \"https://gbfs.urbansharing.com/oslobysykkel.no/station_status.json\";\n\nfunction parseResponse(response) {\n    const status = response.status;\n    if (status === 200) {\n        return response.json();\n    } else {\n        throw new Error(`Invalid status code: ${status}`);\n    }\n}\n\nfunction fetchIt(url) {\n    return fetch(url).then(parseResponse);\n}\n\nfunction mergeStationData(stationInformation, stationStatus) {\n    const statusMap = stationStatus.data.stations.reduce((map, status) => {\n        return {...map, [status.station_id]: status}\n    }, {});\n    const stations = stationInformation.data.stations.map(station => {\n        return {...station, ...statusMap[station.station_id]};\n    });\n    stations.sort((a, b) => a.name.localeCompare(b.name));\n    return stations;\n}\n\nexport function fetchData(callback) {\n    const promises = [\n        STATION_INFORMATION_URL,\n        STATION_STATUS_URL\n    ].map(fetchIt);\n\n    Promise.all(promises).then(({0: stationInformation, 1: stationStatus}) => {\n        callback({\n            stations: mergeStationData(stationInformation, stationStatus)\n        })\n    }).catch((error) => {\n        console.error(error);\n        callback({\n            error: \"\" + error\n        })\n    });\n}","import React from \"react\";\n\nimport \"./errorMessage.css\"\n\nexport default function ({error}) {\n    return error ? <div className=\"errorMessage\">{error}</div> : <></>\n}","import React from \"react\";\nimport \"./stations.css\"\n\nfunction Station({name, num_bikes_available, num_docks_available}) {\n    return (\n        <tr>\n            <td className=\"left\">{name}</td>\n            <td>{num_bikes_available}</td>\n            <td>{num_docks_available}</td>\n        </tr>\n    );\n}\n\nexport default function ({stations}) {\n    if (!stations) {\n        return <></>;\n    }\n    return (\n        <table className=\"stations\">\n            <tr>\n                <th>Stativ</th>\n                <th>Ledige sykler</th>\n                <th>Ledige l√•ser</th>\n            </tr>\n            {stations.map(Station)}\n        </table>\n    )\n}","import React from \"react\";\n\nimport \"./spinner.css\";\n\nexport default function ({visible}) {\n    return visible ? <div className=\"spinner\"/> : <></>\n}","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './app.css';\nimport {fetchData} from \"./api\";\nimport ErrorMessage from './components/errorMessage'\nimport Stations from './components/stations'\nimport Spinner from './components/spinner'\n\nfunction App() {\n    const [data, setData] = useState({loading: true});\n    const [hasFetched, setHasFetched] = useState(false);\n\n    if (!hasFetched) {\n        setHasFetched(true);\n        fetchData(setData);\n    }\n\n    const {error, stations, loading} = data;\n    return (\n        <div className=\"app\">\n            <img src={logo} className=\"logo\" alt=\"logo\"/>\n            <ErrorMessage error={error}></ErrorMessage>\n            <Spinner visible={loading}></Spinner>\n            <Stations stations={stations}></Stations>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}